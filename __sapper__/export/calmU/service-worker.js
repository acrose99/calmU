!function(){"use strict";const a=["/client/client.9021888f.js","/client/client.0b5cd3b5.js","/client/index.16157f24.js"].concat(["/service-worker-template.html","/.DS_Store","/build/bundle.css","/build/bundle.js","/build/bundle.js.map","/favicon.png","/fonts/Comfortaa-Bold.ttf","/fonts/Comfortaa-Light.ttf","/fonts/Comfortaa-Medium.ttf","/fonts/Comfortaa-Regular.ttf","/fonts/Comfortaa-SemiBold.ttf","/global.css","/images/.DS_Store","/images/Calmus/.DS_Store","/images/Calmus/CalmusCity.png","/images/Calmus/CalmusCoffee.png","/images/Calmus/CalmusDefault.png","/images/Calmus/CalmusFire.png","/images/Calmus/CalmusForest.png","/images/Calmus/CalmusLibrary.png","/images/Calmus/CalmusOcean.png","/images/Calmus/CalmusOffice.png","/images/Calmus/CalmusRain.png","/images/Calmus/CalmusSpace.png","/images/Calmus/CalmusTrain.png","/images/Calmus/CalmusWhiteNoise.png","/images/CalmusHeadphones/.DS_Store","/images/CalmusHeadphones/CalmusCity.png","/images/CalmusHeadphones/CalmusCoffee.png","/images/CalmusHeadphones/CalmusDefault.png","/images/CalmusHeadphones/CalmusFire.png","/images/CalmusHeadphones/CalmusForest.png","/images/CalmusHeadphones/CalmusLibrary.png","/images/CalmusHeadphones/CalmusOcean.png","/images/CalmusHeadphones/CalmusOffice.png","/images/CalmusHeadphones/CalmusRain.png","/images/CalmusHeadphones/CalmusSpace.png","/images/CalmusHeadphones/CalmusTrain.png","/images/CalmusHeadphones/CalmusWhiteNoise.png","/images/CalmusHeadphones/Frame 1.png","/images/Homepage/Logo.svg","/template.html"]),e=new Set(a);self.addEventListener("install",e=>{e.waitUntil(caches.open("cache1610157883771").then(e=>e.addAll(a)).then(()=>{self.skipWaiting()}))}),self.addEventListener("activate",a=>{a.waitUntil(caches.keys().then(async a=>{for(const e of a)"cache1610157883771"!==e&&await caches.delete(e);self.clients.claim()}))}),self.addEventListener("fetch",a=>{if("GET"!==a.request.method||a.request.headers.has("range"))return;const s=new URL(a.request.url),t=s.protocol.startsWith("http"),n=s.hostname===self.location.hostname&&s.port!==self.location.port,m=s.host===self.location.host&&e.has(s.pathname),l="only-if-cached"===a.request.cache&&!m;!t||n||l||a.respondWith((async()=>m&&await caches.match(a.request)||async function(a){const e=await caches.open("offline1610157883771");try{const s=await fetch(a);return e.put(a,s.clone()),s}catch(s){const t=await e.match(a);if(t)return t;throw s}}(a.request))())})}();
