!function(){"use strict";const a=1610156757092,e=`cache${a}`,s=["/client/client.90be0495.js","/client/inject_styles.5607aec6.js","/client/index.2445779d.js"].concat(["/service-worker-index.html","/.DS_Store","/build/bundle.css","/build/bundle.js","/build/bundle.js.map","/favicon.png","/fonts/Comfortaa-Bold.ttf","/fonts/Comfortaa-Light.ttf","/fonts/Comfortaa-Medium.ttf","/fonts/Comfortaa-Regular.ttf","/fonts/Comfortaa-SemiBold.ttf","/global.css","/images/.DS_Store","/images/Calmus/.DS_Store","/images/Calmus/CalmusCity.png","/images/Calmus/CalmusCoffee.png","/images/Calmus/CalmusDefault.png","/images/Calmus/CalmusFire.png","/images/Calmus/CalmusForest.png","/images/Calmus/CalmusLibrary.png","/images/Calmus/CalmusOcean.png","/images/Calmus/CalmusOffice.png","/images/Calmus/CalmusRain.png","/images/Calmus/CalmusSpace.png","/images/Calmus/CalmusTrain.png","/images/Calmus/CalmusWhiteNoise.png","/images/CalmusHeadphones/.DS_Store","/images/CalmusHeadphones/CalmusCity.png","/images/CalmusHeadphones/CalmusCoffee.png","/images/CalmusHeadphones/CalmusDefault.png","/images/CalmusHeadphones/CalmusFire.png","/images/CalmusHeadphones/CalmusForest.png","/images/CalmusHeadphones/CalmusLibrary.png","/images/CalmusHeadphones/CalmusOcean.png","/images/CalmusHeadphones/CalmusOffice.png","/images/CalmusHeadphones/CalmusRain.png","/images/CalmusHeadphones/CalmusSpace.png","/images/CalmusHeadphones/CalmusTrain.png","/images/CalmusHeadphones/CalmusWhiteNoise.png","/images/CalmusHeadphones/Frame 1.png","/images/Homepage/Logo.svg","/index.html"]),t=new Set(s);self.addEventListener("install",(a=>{a.waitUntil(caches.open(e).then((a=>a.addAll(s))).then((()=>{self.skipWaiting()})))})),self.addEventListener("activate",(a=>{a.waitUntil(caches.keys().then((async a=>{for(const s of a)s!==e&&await caches.delete(s);self.clients.claim()})))})),self.addEventListener("fetch",(e=>{if("GET"!==e.request.method||e.request.headers.has("range"))return;const s=new URL(e.request.url),n=s.protocol.startsWith("http"),m=s.hostname===self.location.hostname&&s.port!==self.location.port,l=s.host===self.location.host&&t.has(s.pathname),i="only-if-cached"===e.request.cache&&!l;!n||m||i||e.respondWith((async()=>l&&await caches.match(e.request)||async function(e){const s=await caches.open(`offline${a}`);try{const a=await fetch(e);return s.put(e,a.clone()),a}catch(a){const t=await s.match(e);if(t)return t;throw a}}(e.request))())}))}();
